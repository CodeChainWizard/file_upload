//
// void main() {
//   runApp(ProductApp());
// }
//
// class ProductApp extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       home: HomePage(),
//     );
//   }
// }
//
// class HomePage extends StatefulWidget {
//   @override
//   _HomePageState createState() => _HomePageState();
// }
//
// class _HomePageState extends State<HomePage> {
//   List<Map<String, dynamic>> products = [];
//   final TextEditingController searchController = TextEditingController();
//   String searchQuery = "";
//   List<GlobalKey> _repaintBoundaryKeys = [];
//
//   @override
//   void initState() {
//     super.initState();
//     _loadProductsFromLocalStorage();
//   }
//
//   Future<void> _loadProductsFromLocalStorage() async {
//     SharedPreferences prefs = await SharedPreferences.getInstance();
//     String? productData = prefs.getString('products');
//     if (productData != null) {
//       setState(() {
//         products = List<Map<String, dynamic>>.from(jsonDecode(productData));
//         _repaintBoundaryKeys = List.generate(products.length, (index) => GlobalKey());
//       });
//     }
//   }
//
//   Future<void> _addProduct(Map<String, dynamic> product) async {
//     SharedPreferences prefs = await SharedPreferences.getInstance();
//     products.add(product);
//     prefs.setString('products', jsonEncode(products));
//     setState(() {
//       _repaintBoundaryKeys.add(GlobalKey());
//     });
//   }
//
//   // Share the product image and details via WhatsApp
//   Future<void> _shareProductWithDetails(int index, Map<String, dynamic> product) async {
//     String message = 'Check out this product!\n\n${product['name']}\nPrice: \$${product['price']}\nUnit: ${product['unit']}';
//
//     // Get the product image (base64 encoded) if it exists
//     String? base64Image = product['image'];
//     if (base64Image != null) {
//       // Convert base64 to bytes
//       Uint8List imageBytes = base64Decode(base64Image);
//
//       if (kIsWeb) {
//         final blob = html.Blob([imageBytes]);
//         final url = html.Url.createObjectUrlFromBlob(blob);
//         final anchor = html.AnchorElement(href: url)
//           ..setAttribute('download', 'product_image.png')
//           ..click();
//         html.Url.revokeObjectUrl(url);
//       } else {
//         final tempDir = io.Directory.systemTemp;
//         final file = await io.File('${tempDir.path}/product_image.png').create();
//         await file.writeAsBytes(imageBytes);
//         await FlutterShare.shareFile(title: 'Check out this product!', filePath: file.path);
//       }
//     } else {
//       print('No image found to share.');
//     }
//   }
//
//   Future<void> _shareProductImageWithDetails(int index, Map<String, dynamic> product) async {
//     RenderRepaintBoundary boundary = _repaintBoundaryKeys[index].currentContext!.findRenderObject() as RenderRepaintBoundary;
//
//     setState(() {
//       product['showButtons'] = false;
//     });
//
//     await Future.delayed(Duration(milliseconds: 50)); // Wait for UI to update
//
//     try {
//       ui.Image image = await boundary.toImage(pixelRatio: 3.0);
//       ByteData? byteData = await image.toByteData(format: ui.ImageByteFormat.png);
//       Uint8List pngBytes = byteData!.buffer.asUint8List();
//
//       if (kIsWeb) {
//         final blob = html.Blob([pngBytes]);
//         final url = html.Url.createObjectUrlFromBlob(blob);
//         final anchor = html.AnchorElement(href: url)
//           ..setAttribute('download', 'product_with_details.png')
//           ..click();
//         html.Url.revokeObjectUrl(url);
//       } else {
//         final tempDir = io.Directory.systemTemp;
//         final file = await io.File('${tempDir.path}/product_with_details.png').create();
//         await file.writeAsBytes(pngBytes);
//         await FlutterShare.shareFile(title: 'Share Product', filePath: file.path);
//       }
//     } catch (e) {
//       print("Error sharing product image: $e");
//     } finally {
//       setState(() {
//         product['showButtons'] = true;
//       });
//     }
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final filteredProducts = products.where((product) {
//       return product['name'].toLowerCase().contains(searchQuery.toLowerCase());
//     }).toList();
//
//     return Scaffold(
//       appBar: AppBar(
//         title: Text('Product Manager'),
//         actions: [
//           IconButton(
//             icon: Icon(Icons.search),
//             onPressed: () {
//               setState(() {
//                 searchQuery = searchController.text;
//               });
//             },
//           ),
//         ],
//       ),
//       body: Column(
//         children: [
//           Padding(
//             padding: EdgeInsets.all(10.0),
//             child: TextField(
//               controller: searchController,
//               decoration: InputDecoration(
//                 labelText: 'Search Product',
//                 border: OutlineInputBorder(),
//               ),
//               onChanged: (value) {
//                 setState(() {
//                   searchQuery = value;
//                 });
//               },
//             ),
//           ),
//           Expanded(
//             child: GridView.builder(
//               gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
//                 crossAxisCount: 2,
//                 childAspectRatio: 3 / 4,
//               ),
//               itemCount: filteredProducts.length,
//               itemBuilder: (context, index) {
//                 final product = filteredProducts[index];
//                 // Check if the image is available as base64 data
//                 Uint8List? imageBytes;
//                 if (product['image'] != null) {
//                   imageBytes = base64Decode(product['image']);
//                 }
//                 product['showButtons'] ??= true; // Initialize button visibility if not set
//                 return RepaintBoundary(
//                   key: _repaintBoundaryKeys[index],
//                   child: Card(
//                     child: Column(
//                       children: [
//                         Expanded(
//                           child: imageBytes != null
//                               ? Image.memory(imageBytes, fit: BoxFit.cover)
//                               : Icon(Icons.image, size: 100), // Fallback if image is missing
//                         ),
//                         ListTile(
//                           title: Text(product['name']),
//                           subtitle: Text('Price: \$${product['price']}\nUnit: ${product['unit']}'),
//                           trailing: product['showButtons']
//                               ? Row(
//                             mainAxisSize: MainAxisSize.min,
//                             children: [
//                               IconButton(
//                                 icon: Icon(Icons.message_rounded),
//                                 onPressed: () {
//                                   _shareProductWithDetails(index, product);
//                                 },
//                               ),
//                               IconButton(
//                                 icon: Icon(Icons.share),
//                                 onPressed: () {
//                                   _shareProductImageWithDetails(index, product);
//                                 },
//                               ),
//                             ],
//                           )
//                               : null,
//                         ),
//                       ],
//                     ),
//                   ),
//                 );
//               },
//             ),
//           ),
//         ],
//       ),
//       floatingActionButton: FloatingActionButton(
//         onPressed: _showAddProductDialog,
//         child: Icon(Icons.add),
//       ),
//     );
//   }
//
//   Future<void> _showAddProductDialog() async {
//     TextEditingController nameController = TextEditingController();
//     TextEditingController priceController = TextEditingController();
//     TextEditingController unitController = TextEditingController();
//     XFile? _imageFile;
//
//     Future<void> pickImage() async {
//       final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
//       if (pickedFile != null) {
//         setState(() {
//           _imageFile = pickedFile;
//         });
//       }
//     }
//
//     showDialog(
//       context: context,
//       builder: (context) {
//         return AlertDialog(
//           title: Text('Add New Product'),
//           content: Column(
//             mainAxisSize: MainAxisSize.min,
//             children: [
//               TextField(
//                 controller: nameController,
//                 decoration: InputDecoration(labelText: 'Product Name'),
//               ),
//               TextField(
//                 controller: priceController,
//                 keyboardType: TextInputType.number,
//                 decoration: InputDecoration(labelText: 'Price'),
//               ),
//               TextField(
//                 controller: unitController,
//                 decoration: InputDecoration(labelText: 'Unit'),
//               ),
//               SizedBox(height: 10),
//               ElevatedButton(
//                 onPressed: pickImage,
//                 child: Text('Pick Image'),
//               ),
//               if (_imageFile != null)
//                 Padding(
//                   padding: EdgeInsets.symmetric(vertical: 10),
//                   child: kIsWeb
//                       ? Image.network(_imageFile!.path, width: 100, height: 100)
//                       : Image.file(io.File(_imageFile!.path), width: 100, height: 100),
//                 ),
//             ],
//           ),
//           actions: [
//             ElevatedButton(
//               onPressed: () async {
//                 if (_imageFile != null) {
//                   final bytes = await _imageFile!.readAsBytes();
//                   final base64String = base64Encode(bytes);
//                   Map<String, dynamic> product = {
//                     'name': nameController.text,
//                     'price': double.parse(priceController.text),
//                     'unit': unitController.text,
//                     'image': base64String, // Save the base64 encoded image
//                   };
//                   await _addProduct(product);
//                   Navigator.pop(context);
//                 }
//               },
//               child: Text('Add Product'),
//             ),
//           ],
//         );
//       },
//     );
//   }
// }